{"ast":null,"code":"var _jsxFileName = \"/home/front/projects/react-chat/client/src/components/Time/index.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { formatDistance, format, isToday } from 'date-fns/';\nimport ruLocale from 'date-fns/locale/ru';\n\nconst Time = ({\n  value,\n  addSuffix,\n  includeSeconds,\n  isFormatted\n}) => {\n  const parsetDate = Date.parse(value);\n\n  const getFormattedDate = date => {\n    if (isToday(date)) {\n      return format(date, 'HH:mm');\n    } else {\n      return format(date, 'd.MM.Y');\n    }\n  };\n\n  const date = formatDistance(parsetDate, new Date(), {\n    addSuffix,\n    locale: ruLocale,\n    includeSeconds\n  });\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: \"Time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, isFormatted ? getFormattedDate(parsetDate) : date);\n};\n\nTime.propTypes = {\n  value: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]).isRequired,\n  addSuffix: PropTypes.bool,\n  includeSeconds: PropTypes.bool,\n  isFormatted: PropTypes.bool\n};\nTime.defaultProps = {\n  addSuffix: true,\n  includeSeconds: true,\n  isFormatted: false\n};\nexport default Time;","map":{"version":3,"sources":["/home/front/projects/react-chat/client/src/components/Time/index.js"],"names":["React","PropTypes","formatDistance","format","isToday","ruLocale","Time","value","addSuffix","includeSeconds","isFormatted","parsetDate","Date","parse","getFormattedDate","date","locale","propTypes","oneOfType","instanceOf","number","string","isRequired","bool","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,EAAyBC,MAAzB,EAAiCC,OAAjC,QAAgD,WAAhD;AACA,OAAOC,QAAP,MAAqB,oBAArB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,SAAT;AAAoBC,EAAAA,cAApB;AAAoCC,EAAAA;AAApC,CAAD,KAAuD;AAClE,QAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWN,KAAX,CAAnB;;AAEA,QAAMO,gBAAgB,GAAGC,IAAI,IAAI;AAC/B,QAAIX,OAAO,CAACW,IAAD,CAAX,EAAmB;AACjB,aAAOZ,MAAM,CAACY,IAAD,EAAO,OAAP,CAAb;AACD,KAFD,MAEO;AACL,aAAOZ,MAAM,CAACY,IAAD,EAAO,QAAP,CAAb;AACD;AACF,GAND;;AAOA,QAAMA,IAAI,GAAGb,cAAc,CAACS,UAAD,EAAa,IAAIC,IAAJ,EAAb,EAAyB;AAClDJ,IAAAA,SADkD;AAElDQ,IAAAA,MAAM,EAAEX,QAF0C;AAGlDI,IAAAA;AAHkD,GAAzB,CAA3B;AAMA,sBACE;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBC,WAAW,GAAGI,gBAAgB,CAACH,UAAD,CAAnB,GAAkCI,IAArE,CADF;AAGD,CAnBD;;AAqBAT,IAAI,CAACW,SAAL,GAAiB;AACfV,EAAAA,KAAK,EAAEN,SAAS,CAACiB,SAAV,CAAoB,CAACjB,SAAS,CAACkB,UAAV,CAAqBP,IAArB,CAAD,EAA6BX,SAAS,CAACmB,MAAvC,EAA+CnB,SAAS,CAACoB,MAAzD,CAApB,EACJC,UAFY;AAGfd,EAAAA,SAAS,EAAEP,SAAS,CAACsB,IAHN;AAIfd,EAAAA,cAAc,EAAER,SAAS,CAACsB,IAJX;AAKfb,EAAAA,WAAW,EAAET,SAAS,CAACsB;AALR,CAAjB;AAQAjB,IAAI,CAACkB,YAAL,GAAoB;AAClBhB,EAAAA,SAAS,EAAE,IADO;AAElBC,EAAAA,cAAc,EAAE,IAFE;AAGlBC,EAAAA,WAAW,EAAE;AAHK,CAApB;AAMA,eAAeJ,IAAf","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { formatDistance, format, isToday } from 'date-fns/'\nimport ruLocale from 'date-fns/locale/ru'\n\nconst Time = ({ value, addSuffix, includeSeconds, isFormatted }) => {\n  const parsetDate = Date.parse(value);\n\n  const getFormattedDate = date => {\n    if (isToday(date)) {\n      return format(date, 'HH:mm')\n    } else {\n      return format(date, 'd.MM.Y')\n    }\n  }\n  const date = formatDistance(parsetDate, new Date(), {\n    addSuffix,\n    locale: ruLocale,\n    includeSeconds,\n  })\n\n  return (\n    <span className=\"Time\">{isFormatted ? getFormattedDate(parsetDate) : date}</span>\n  )\n}\n\nTime.propTypes = {\n  value: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])\n    .isRequired,\n  addSuffix: PropTypes.bool,\n  includeSeconds: PropTypes.bool,\n  isFormatted: PropTypes.bool,\n}\n\nTime.defaultProps = {\n  addSuffix: true,\n  includeSeconds: true,\n  isFormatted: false,\n}\n\nexport default Time\n"]},"metadata":{},"sourceType":"module"}