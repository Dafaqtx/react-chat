{"ast":null,"code":"var _jsxFileName = \"/home/front/projects/react-chat/src/components/MessageAudio/index.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { covertCurrentTime } from 'utils/helpers';\nimport { voiceDiagramIcon, playIcon, pauseIcon } from 'assets/icons';\nimport './MessageAudio.scss';\n\nconst MessageAudio = ({\n  src\n}) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [audioCurrentTime, setAudioCurrentTime] = useState(0);\n  const [audioProgress, setAudioProgress] = useState(0);\n  const audioRef = useRef(null);\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.addEventListener('playing', () => {\n        setIsPlaying(true);\n      }, false);\n      audioRef.current.addEventListener('ended', () => {\n        setIsPlaying(false);\n        setAudioProgress(0);\n        setAudioCurrentTime(0);\n      }, false);\n      audioRef.current.addEventListener('pause', () => {\n        setIsPlaying(false);\n      }, false);\n      audioRef.current.addEventListener('timeupdate', () => {\n        const currentTime = audioRef.current.currentTime;\n        const duration = audioRef.current && audioRef.current.duration || 0;\n        setAudioCurrentTime(currentTime);\n        setAudioProgress(currentTime / duration * 100);\n      }, false);\n    }\n  }, []);\n\n  const togglePlay = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n    } else {\n      audioRef.current.play();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"MessageAudio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"audio\", {\n    src: src,\n    ref: audioRef,\n    preload: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"MessageAudio__progress\",\n    style: {\n      width: `${audioProgress}%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"MessageAudio__info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"MessageAudio__btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => togglePlay(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: isPlaying ? pauseIcon : playIcon,\n    alt: isPlaying ? 'Pause' : 'Play',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"MessageAudio__diagram\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: voiceDiagramIcon,\n    alt: \"Voice diagram\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"MessageAudio__duration\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, covertCurrentTime(audioCurrentTime))));\n};\n\nMessageAudio.propTypes = {};\nexport default MessageAudio;","map":{"version":3,"sources":["/home/front/projects/react-chat/src/components/MessageAudio/index.js"],"names":["React","useState","useRef","useEffect","PropTypes","covertCurrentTime","voiceDiagramIcon","playIcon","pauseIcon","MessageAudio","src","isPlaying","setIsPlaying","audioCurrentTime","setAudioCurrentTime","audioProgress","setAudioProgress","audioRef","current","addEventListener","currentTime","duration","togglePlay","pause","play","width","propTypes"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { covertCurrentTime } from 'utils/helpers'\n\nimport { voiceDiagramIcon, playIcon, pauseIcon } from 'assets/icons'\n\nimport './MessageAudio.scss'\n\nconst MessageAudio = ({ src }) => {\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [audioCurrentTime, setAudioCurrentTime] = useState(0)\n  const [audioProgress, setAudioProgress] = useState(0)\n  const audioRef = useRef(null)\n\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.addEventListener(\n        'playing',\n        () => {\n          setIsPlaying(true)\n        },\n        false\n      )\n\n      audioRef.current.addEventListener(\n        'ended',\n        () => {\n          setIsPlaying(false)\n          setAudioProgress(0)\n          setAudioCurrentTime(0)\n        },\n        false\n      )\n\n      audioRef.current.addEventListener(\n        'pause',\n        () => {\n          setIsPlaying(false)\n        },\n        false\n      )\n\n      audioRef.current.addEventListener(\n        'timeupdate',\n        () => {\n          const currentTime = audioRef.current.currentTime\n          const duration = (audioRef.current && audioRef.current.duration) || 0\n\n          setAudioCurrentTime(currentTime)\n          setAudioProgress((currentTime / duration) * 100)\n        },\n        false\n      )\n    }\n  }, [])\n  const togglePlay = () => {\n    if (isPlaying) {\n      audioRef.current.pause()\n    } else {\n      audioRef.current.play()\n    }\n  }\n  return (\n    <div className=\"MessageAudio\">\n      <audio src={src} ref={audioRef} preload=\"auto\" />\n      <div\n        className=\"MessageAudio__progress\"\n        style={{ width: `${audioProgress}%` }}></div>\n      <div className=\"MessageAudio__info\">\n        <div className=\"MessageAudio__btn\">\n          <button type=\"button\" onClick={() => togglePlay()}>\n            <img\n              src={isPlaying ? pauseIcon : playIcon}\n              alt={isPlaying ? 'Pause' : 'Play'}\n            />\n          </button>\n        </div>\n        <div className=\"MessageAudio__diagram\">\n          <img src={voiceDiagramIcon} alt=\"Voice diagram\" />\n        </div>\n        <span className=\"MessageAudio__duration\">\n          {covertCurrentTime(audioCurrentTime)}\n        </span>\n      </div>\n    </div>\n  )\n}\n\nMessageAudio.propTypes = {}\n\nexport default MessageAudio\n"]},"metadata":{},"sourceType":"module"}